{"version":3,"sources":["components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","hoc/withAuthRedirect.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/Message/Message.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","selectors/dialogsSelectors.js","components/Dialogs/DialogsContainer.jsx"],"names":["renderTextField","input","label","meta","touched","invalid","error","props","className","styles","textField","multiline","size","variant","helperText","FormControl","controlType","hasError","formControl","React","createElement","createField","placeholder","name","validators","component","type","text","validate","required","value","maxLengthCreator","maxLength","length","module","exports","mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","to","DialogItem","dialog","id","activeClassName","activeLink","src","imgSrc","imgDialog","Message","message","border","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","textAreaWidthAuto","Dialogs","dialogsElement","dialogsPage","dialogs","map","d","key","messagesElement","messages","m","dialogsItems","sendMessage","values","addMessage","newMessageBody","getDialogsPage","compose"],"mappings":"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","file":"static/js/5.3e6eb45a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nexport const renderTextField = ({ input, label, meta: { touched, invalid, error }, ...props }) => (\r\n    <div className={styles.textField}>\r\n        <TextField\r\n            label={label}\r\n            multiline\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            error={touched && invalid}\r\n            helperText={touched && error}\r\n            {...input}\r\n            {...props}\r\n        />\r\n    </div>\r\n);\r\n\r\n/*Пропсы будут содержать в себе всё, кроме input и meta*/\r\nexport let FormControl = ({ input, meta: { touched, error }, controlType, ...props }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            {React.createElement(controlType, { ...input, ...props })}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const createField = (placeholder, name, validators, component, controlType, type = {}, props = {}, text = {}) => {\r\n    return (\r\n        <div className={styles.textField}>\r\n            <Field placeholder={placeholder} name={name} component={component} controlType={controlType} validate={validators} type={type} {...props} />{text}\r\n        </div>\r\n    )\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Поле обязательно для заполнения';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return 'Макс. длина ' + maxLength + ' символов';\r\n    return undefined;\r\n}\r\n\r\n//more examples: https://redux-form.com/8.3.0/examples/fieldlevelvalidation/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Wfj3\",\"error\":\"FormsControls_error__2_D7_\",\"formError\":\"FormsControls_formError__36Lbt\",\"textField\":\"FormsControls_textField__2b2e9\"};","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    const RedirectComponent = (props) => {\r\n        if (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n        return <Component {...props} />\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1iKDV\",\"dialogsItems\":\"Dialogs_dialogsItems__4zTg0\",\"activeLink\":\"Dialogs_activeLink__32FVJ\",\"dialog\":\"Dialogs_dialog__3-qaq\",\"messages\":\"Dialogs_messages__2Olku\",\"sendMessage\":\"Dialogs_sendMessage__35Jk3\",\"textAreaWidthAuto\":\"Dialogs_textAreaWidthAuto__25Oxq\",\"border\":\"Dialogs_border__1uG36\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeLink\":\"DialogItem_activeLink__3FxEh\",\"dialog\":\"DialogItem_dialog__vmEVD\",\"imgDialog\":\"DialogItem_imgDialog__1DXaM\",\"name\":\"DialogItem_name__2i5LR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messages\":\"Message_messages__2_j6-\",\"message\":\"Message_message__3vcQC\",\"border\":\"Message_border__1_onV\"};","import React from 'react';\r\nimport styles from './DialogItem.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n\treturn (\r\n\t\t<div className={styles.dialog}>\r\n\t\t\t<NavLink to={\"/dialogs/\" + props.id} activeClassName={styles.activeLink}><img src={props.imgSrc} className={styles.imgDialog} /> <div className={styles.name}>{props.name}</div></NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport styles from './Message.module.css';\r\n\r\nconst Message = ({message}) => {\r\n\treturn (\r\n\t\t<div className={styles.message + \" \" + styles.border}>\r\n\t\t\t{message}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport styles from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { FormControl, renderTextField } from '../common/FormsControls/FormsControls';\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\n\r\nconst maxLength = maxLengthCreator(300);\r\n\r\nconst Dialogs = (props) => {\r\n\tlet dialogsElement = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} imgSrc={d.imgSrc} />);\r\n\tlet messagesElement = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} id={m.id} />);\r\n\r\n\tlet addNewMessage = (values) => {\r\n\t\tprops.addMessage(values.newMessageBody);\r\n\t}\r\n\r\n\t//редирект на форму логина\r\n\tif (!props.isAuth) return <Redirect to={\"/login\"} />;\r\n\r\n\treturn (\r\n\t\t<div className={styles.dialogs}>\r\n\t\t\t<div className={styles.dialogsItems + \" \" + styles.border}>\r\n\t\t\t\t{dialogsElement}\r\n\t\t\t</div>\r\n\t\t\t<div className={styles.messages}>\r\n\t\t\t\t<div className={styles.border}>\r\n\t\t\t\t\t{messagesElement}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={styles.sendMessage + ' ' + styles.border}>\r\n\t\t\t\t\t<AddMessageReduxForm onSubmit={addNewMessage} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst DialogForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t{/* <Field component={FormControl} controlType=\"textarea\" className={styles.textAreaWidthAuto} name={\"newMessageBody\"} placeholder={\"Введите сообщение...\"} validate={[required, maxLength]} /> */}\r\n\t\t\t<Field component={renderTextField} className={styles.textAreaWidthAuto} name={\"newMessageBody\"} label={\"Введите сообщение...\"} validate={[required, maxLength]} />\r\n\t\t\t<div >\r\n\t\t\t\t{/* <Button variant=\"contained\" size=\"medium\" color=\"primary\" style={{ marginTop: '10px' }} endIcon={<Icon>send</Icon>}>Отправить</Button> */}\r\n\t\t\t\t<button>Отправить</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({ form: 'dialogAddMessageForm' })(DialogForm);\r\n\r\nexport default Dialogs;","//import { createSelector } from \"reselect\";\r\n\r\nexport const getDialogsPage = (state) => {\r\n    return state.dialogsPage;\r\n}","import { addMessage } from '../../redux/dialogsReducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from './../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { getDialogsPage } from './../../selectors/dialogsSelectors';\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogsPage: getDialogsPage(state),\r\n\t}\r\n}\r\n\r\n//compose()() вызов компонент (Снизу вверх): Dialogs -> withAuthRedirect -> connect()(), т.е. как матрешка, \r\n//главная компонента Dialogs накрывается новым слоем контейнерных компонент, указанных в compose(ЗДЕСЬ)(ГЛАВНАЯ КОМПНЕНТА)\r\nexport default compose(\r\n\tconnect(mapStateToProps, { addMessage }), //connect()() вызов функции connect, а потом вызов того, что она вернула\r\n\twithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}