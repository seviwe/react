{"version":3,"sources":["components/common/FormsControls/FormsControls.jsx","utils/validators/validators.js","components/common/FormsControls/FormsControls.module.css","components/Login/Login.module.css","components/Login/Login.jsx","components/Login/LoginContainer.jsx"],"names":["FormControl","input","meta","touched","error","controlType","props","hasError","className","styles","formControl","React","createElement","createField","placeholder","name","validators","component","type","text","validate","required","value","maxLengthCreator","maxLength","length","module","exports","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","captchaUrl","src","formError","Login","authUser","isAuth","to","values","login","password","rememberMe","captcha","connect","state","getIsAuth","getCaptchaUrl"],"mappings":"yOAQWA,EAAc,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,MAA2D,IAApDC,KAAOC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,MAAQC,EAA4B,EAA5BA,YAAgBC,EAAY,8CAC7EC,EAAWJ,GAAWC,EAC5B,OACI,yBAAKI,UAAWC,IAAOC,YAAc,KAAOH,EAAWE,IAAOL,MAAQ,KACjEO,IAAMC,cAAcP,EAApB,eAAsCJ,EAAtC,GAAgDK,IAChDC,GAAY,8BAAOH,KA6BnBS,EAAc,SAACC,EAAaC,EAAMC,EAAYC,EAAWZ,GAAmD,IAAtCa,EAAqC,uDAA9B,GAAIZ,EAA0B,uDAAlB,GAAIa,EAAc,uDAAP,GAC7G,OACI,6BACI,kBAAC,IAAD,eAAOL,YAAaA,EAAaC,KAAMA,EAAME,UAAWA,EAAWZ,YAAaA,EAAae,SAAUJ,EAAYE,KAAMA,GAAUZ,IAAUa,K,iCC7CzJ,oEAAO,IAAME,EAAW,SAAAC,GACpB,IAAIA,EACJ,MAAO,+KAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAO,4DAAiBA,EAAY,uD,oBCL/EE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,UAAY,mC,oBCApHD,EAAOC,QAAU,CAAC,UAAY,2B,kICOxBH,EAAYD,YAAiB,IAkD7BK,EAAiBC,YAAU,CAAEC,KAAM,SAAlBD,EAjCL,SAACvB,GAClB,OACC,0BAAMyB,SAAUzB,EAAM0B,cACpBnB,YAAY,iCAAS,QAAS,CAACQ,IAAUG,GAAYxB,IAAa,QAAS,GAAIM,EAAO,IACtFO,YAAY,uCAAU,WAAY,CAACQ,IAAUG,GAAYxB,IAAa,QAAS,WAAYM,EAAO,IAOnG,6BACC,kBAAC2B,EAAA,EAAD,CAAOf,KAAM,WAAYD,UAAW,QAASF,KAAM,eADpD,oFAGCT,EAAM4B,YAAc,yBAAKC,IAAK7B,EAAM4B,aACpC5B,EAAM4B,YAAcrB,YAAY,4EAAiB,UAAW,CAACQ,KAAWrB,IAAa,QAAS,GAAIM,EAAO,IAEzGA,EAAMF,OAAS,yBAAKI,UAAWC,IAAO2B,WACrC9B,EAAMF,OAGR,6BACC,mEAED,6BACC,8BAAM,+PACN,8BAAM,qCAAN,uBAA6C,6BAC7C,8BAAM,wCAAN,cAQWiC,EAlDD,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,OAAQL,EAAiB,EAAjBA,WAKlC,OAAIK,EAAe,kBAAC,IAAD,CAAUC,GAAI,aAGhC,6BACC,kGACA,kBAACZ,EAAD,CAAgBG,SATA,SAACU,GAClBH,EAASG,EAAOC,MAAOD,EAAOE,SAAUF,EAAOG,WAAYH,EAAOI,UAQ1BX,WAAYA,M,gBCPvCY,uBARO,SAACC,GACtB,MAAO,CACNR,OAAQS,YAAUD,GAClBb,WAAYe,YAAcF,MAKY,CAAET,cAA3BQ,CAAuCT","file":"static/js/7.9731bbab.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from './FormsControls.module.css';\r\nimport { reduxForm, Field } from 'redux-form';\r\n//import Button from '@material-ui/core/Button';\r\n//import Icon from '@material-ui/core/Icon';\r\n//import TextField from '@material-ui/core/TextField';\r\n\r\n/*REST оператор. Пропсы будут содержать в себе всё, кроме input и meta*/\r\nexport let FormControl = ({ input, meta: {touched, error}, controlType, ...props }) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            {React.createElement(controlType, { ...input, ...props })}\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n// export const Textarea = ({ input, meta, ...props }) => {\r\n\r\n//     const hasError = meta.touched && meta.error;\r\n\r\n//     return (\r\n//         <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n//             <textarea {...input} {...props} />\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export const Input = ({ input, meta, ...props }) => {\r\n\r\n//     const hasError = meta.touched && meta.error;\r\n\r\n//     return (\r\n//         <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n//             <input {...input} {...props} />\r\n//             {hasError && <span>{meta.error}</span>}\r\n//         </div>\r\n//     )\r\n// }\r\n\r\nexport const createField = (placeholder, name, validators, component, controlType, type = {}, props = {}, text = {}) => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder} name={name} component={component} controlType={controlType} validate={validators} type={type} {...props} />{text}\r\n        </div>\r\n    )\r\n}","export const required = value => {\r\n    if (value) return undefined;\r\n    return 'Поле обязательно для заполнения';\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n    if (value && value.length > maxLength) return 'Макс. длина ' + maxLength + ' символов';\r\n    return undefined;\r\n}\r\n\r\n//more examples: https://redux-form.com/8.3.0/examples/fieldlevelvalidation/","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1Wfj3\",\"error\":\"FormsControls_error__2_D7_\",\"formError\":\"FormsControls_formError__36Lbt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formError\":\"Login_formError__17URf\"};","import React from 'react';\r\nimport styles from './Login.module.css';\r\n//import styles from '../common/FormsControls/FormsControls.module.css';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../utils/validators/validators';\r\nimport { FormControl, createField } from '../../components/common/FormsControls/FormsControls';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst maxLength = maxLengthCreator(30);\r\n\r\nconst Login = ({ authUser, isAuth, captchaUrl }) => {\r\n\tlet AuthNewUser = (values) => {\r\n\t\tauthUser(values.login, values.password, values.rememberMe, values.captcha);\r\n\t}\r\n\t//если пользователь залогинен\r\n\tif (isAuth) return <Redirect to={\"/profile\"} />\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<h1>Авторизация</h1>\r\n\t\t\t<LoginReduxForm onSubmit={AuthNewUser} captchaUrl={captchaUrl} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nconst LoginForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t{createField(\"Логин\", \"login\", [required, maxLength], FormControl, \"input\", \"\", props, \"\")}\r\n\t\t\t{createField(\"Пароль\", \"password\", [required, maxLength], FormControl, \"input\", \"password\", props, \"\")}\r\n\t\t\t{/* <div>\r\n\t\t\t\t<Field placeholder={\"Логин\"} name={\"login\"} component={FormControl} controlType=\"input\" validate={[required, maxLength]} />\r\n\t\t\t</div>\r\n\t\t\t <div>\r\n\t\t\t\t<Field placeholder={\"Пароль\"} name={\"password\"} component={FormControl} type={\"password\"} controlType=\"input\" validate={[required, maxLength]} />\r\n\t\t\t</div> */}\r\n\t\t\t<div>\r\n\t\t\t\t<Field type={\"checkbox\"} component={\"input\"} name={\"rememberMe\"} /> Запомнить меня\r\n\t\t\t</div>\r\n\t\t\t{props.captchaUrl && <img src={props.captchaUrl} />}\r\n\t\t\t{props.captchaUrl && createField(\"Введите капчу\", \"captcha\", [required], FormControl, \"input\", \"\", props, \"\")}\r\n\t\t\t{/* Вывод ошибки при неправильной авторизации */}\r\n\t\t\t{props.error && <div className={styles.formError}>\r\n\t\t\t\t{props.error}\r\n\t\t\t</div>\r\n\t\t\t}\r\n\t\t\t<div>\r\n\t\t\t\t<button>Войти</button>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<span><h1>Тестовые данные для тестирования соц сети:</h1></span>\r\n\t\t\t\t<span><b>Email:</b> free@samuraijs.com</span><br/>\r\n\t\t\t\t<span><b>Password:</b> free</span>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm);\r\n\r\nexport default Login;","import { authUser } from '../../redux/authReducer';\r\nimport Login from './Login';\r\nimport { connect } from 'react-redux';\r\nimport { getIsAuth, getCaptchaUrl } from './../../selectors/authSelectors';\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tisAuth: getIsAuth(state),\r\n\t\tcaptchaUrl: getCaptchaUrl(state),\r\n\t}\r\n}\r\n\r\n//главная компонента Dialogs накрывается новым слоем контейнерных компонент, указанных в compose(ЗДЕСЬ)(ГЛАВНАЯ КОМПНЕНТА)\r\nexport default connect(mapStateToProps, { authUser })(Login);"],"sourceRoot":""}